FORMAT: 1A
HOST: http://www.google.com

# robert
Robert, User Managment as a Service.

# User

## User [/users]

### List all User [GET]
+ Response 200 (application/json)

        [{
          "_id": 1234, "email": "foo@bar"
        }, {
          "_id": 2314, "email": "bar@gmail.com"
        }]

### Create a User [POST]
+ Parameters
    + email (required, string, `foo@bar.com`) ... The user email.
    + password (required, string, `secret`) ... The user password in plain text.
    + other_key (optional, string, `any value`) ... Any other key with any other values, you can put has many as you want here.

+ Request (application/json)

        { 
          "email": "foo@bar.com",
          "password": "secret",
          "username": "Bob"
          "other_key": "any value"
        }

    
+ Response 201 (application/json)

        {
          "_id": "48648689460",
          "email": "foo@bar.com",
          "username": "Bob",
          "other_key" : "any value"
        }
        
### Update a User [PATCH]

All the value but query need to be preceded by a "$" please refer to the request example.
Note that you can also refer to the MongoDB documentation.

+ Parameters
    + query (required, map, `{<field>: <value1>}`) ... The query to find the element to modify.
    + set (optional, map, `{<field1>: <value1>, <field2>: <value2>}`) ... What key set to what field.
    + unset (optional, map, `{<field>: 1, <field2>: ""}`) ... Unset the values of the key <field>, doesn't touch the value of <field2>.
    + push (optional, map, `{<array> : <value1>}`) ... Push the value on the the array.
    + pushAll (optional, map,`{<array>: [<value1>, <value2>]`) ... Push all the values into the array.
    + addToSet (optional, map, `{<set>: <value>}`) ... Add the element to the array if there is not one already.
    + pull (optional, map, `{<arrayField> : <value>, <arrayField> : <query>}`) ... Remove the element who match the query.
    + pop (optional, map, `{ <arrayField>: <-1 | 1> }`) ... Remove the first or the last element of the array.
    
+ Request (application/json)

        {
         "query" : {"other_key": "any value"},
         "$set" : {"foo": 3, "bar": 5},
         "$unset" : {"other": 1, "foo": 0}, // unset the value of the key other, leave untouched the value of foo.
         "$push" : {"array1": 5, "array2": "bar"},
         "$pushAll" : {"array2": ["foo", 3]},
         "$addToSet" : {"array1": "foo", "set2": {"$each" : ["woof", "bar", "meows"]},
         "$pull" : {"array2": "meows"},
         "$pop" : {"array2": 1, "array2": -1}
        }
        
+ Response 200 (application/json)

        {
         "_id": "48648689460",
         "email": "foo@bar.com",
         "username": "Bob",
         "other_key" : "any value",
         "foo": 3,
         "bar": 5,
         "array1": ["foo"],
         "array2": ["bar", "foo", 3],
        }

## Login [/users/login]

### Make the login of the User [POST]
Need to provide or the password or the username.

+ Parameters
    + password (required, string, `secret`) ... The password of the user.
    + username (optional, string, `Bob`) ... The username of the user.
    + email (optional, string, `foo@bar.com`) ... The email of the user.

+ Request (application/json)

        {
         "email": "foo@bar.com",
         "password": "secret"
        }

+ Response 200 (application/json)

        {
          "_id": "48648689460",
          "email": "foo@bar.com",
          "username": "Bob",
          "other_key" : "any value"
        }
        